import logging
from pathlib import Path
import sys
from datetime import datetime

def setup_logging(log_file: str = None, level: str = 'INFO') -> logging.Logger:
    """Configure and return the logger instance."""
    # Create logger
    logger = logging.getLogger('vulnerability_dataset')
    logger.setLevel(getattr(logging, level))

    # Create formatters and handlers
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # File handler (if log_file specified)
    if log_file:
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
        
        file_handler = logging.FileHandler(log_path)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

    return logger

def log_execution_time(logger: logging.Logger):
    """Decorator to log function execution time."""
    def decorator(func):
        def wrapper(*args, **kwargs):
            start_time = datetime.now()
            logger.info(f"Starting {func.__name__}")
            
            try:
                result = func(*args, **kwargs)
                execution_time = datetime.now() - start_time
                logger.info(f"Completed {func.__name__} in {execution_time}")
                return result
            except Exception as e:
                execution_time = datetime.now() - start_time
                logger.error(f"Failed {func.__name__} after {execution_time}: {str(e)}")
                raise
        return wrapper
    return decorator