import os
import sys
from pathlib import Path
import logging

# Add project root to Python path
project_root = str(Path(__file__).parent.parent.absolute())
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from Research.Benchmarking.project.vulnerability_dataset.git.git_manager_parse_LLM import GitManager
from llm.code_extractor import LLMCodeExtractor

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_commit_analysis():
    """Test extraction of vulnerable code blocks from a commit."""
    
    # Initialize GitManager and set repository details
    repo_path = "/home/azibaeir/Research/Benchmarking/gecko-dev"
    git_manager = GitManager()
    git_manager.project = "mozilla"
    git_manager.repo_path = repo_path
    
    # Initialize our LLMCodeExtractor
    code_extractor = LLMCodeExtractor()
    
    # Specify the commit hash to test
    commit_hash = "d3fc632669c98bc8a94c820be75455ca4b446cf7"
    
    try:
        # Get the list of changed files for the commit
        changed_files = git_manager.get_changed_files(git_manager.project, commit_hash)
        logger.info(f"Changed files in commit {commit_hash}: {changed_files}")
        
        for file_path in changed_files:
            logger.info(f"Processing file: {file_path}")
            
            # Retrieve pre-commit and commit file contents
            pre_commit_content = git_manager.get_file(f"{commit_hash}^", file_path)
            commit_content = git_manager.get_file(commit_hash, file_path)
            
            if not pre_commit_content or not commit_content:
                logger.warning(f"Could not get content for {file_path}")
                continue
            
            # Retrieve the file diff
            file_diff = git_manager.get_diff(git_manager.project, commit_hash, file_path)
            if not file_diff:
                logger.warning(f"Could not get diff for {file_path}")
                continue
            
            # Extract code blocks using the LLM code extractor
            code_blocks = code_extractor.extract_code_blocks(
                file_diff=file_diff,
                pre_commit_content=pre_commit_content,
                commit_content=commit_content
            )
            
            logger.info(f"Results for file: {file_path}")
            
            if code_blocks["vulnerable_code"]:
                logger.info("VULNERABLE CODE BLOCK:")
                print("-" * 40)
                print(code_blocks["vulnerable_code"])
                print("-" * 40)
            else:
                logger.warning("No vulnerable code extracted")
                
    except Exception as e:
        logger.error(f"Error analyzing commit: {e}")
        raise

if __name__ == "__main__":
    test_commit_analysis()
