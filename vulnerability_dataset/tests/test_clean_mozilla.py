#!/usr/bin/env python3
import sqlite3
import logging
from pathlib import Path

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def clean_mozilla_data(db_path="vulnerability_dataset/database/database.sqlite"):
    """
    Clean Mozilla data from vulnerabilities_llama3_1_8b table by setting all columns 
    except COMMIT_HASH to NULL where PROJECT is 'mozilla'
    """
    try:
        # Connect to database
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Get all columns except COMMIT_HASH
        cursor.execute("PRAGMA table_info(vulnerabilities_llama3_1_8b)")
        columns = [col[1] for col in cursor.fetchall() if col[1] != 'COMMIT_HASH']

        # Build UPDATE query
        set_clause = ", ".join([f"{col} = NULL" for col in columns])
        query = f"""
            UPDATE vulnerabilities_llama3_1_8b 
            SET {set_clause}
            WHERE PROJECT = 'mozilla'
        """

        # Execute the update
        cursor.execute(query)
        rows_affected = cursor.rowcount
        
        # Commit the changes
        conn.commit()
        
        logger.info(f"Successfully cleaned {rows_affected} Mozilla records")
        logger.info("Only COMMIT_HASH values were preserved")

    except sqlite3.Error as e:
        logger.error(f"Database error occurred: {e}")
        if 'conn' in locals():
            conn.rollback()
    except Exception as e:
        logger.error(f"An error occurred: {e}")
        if 'conn' in locals():
            conn.rollback()
    finally:
        if 'conn' in locals():
            conn.close()

def main():
    # Get the absolute path to the database
    db_path = Path(__file__).parent.parent / "database" / "database.sqlite"
    
    if not db_path.exists():
        logger.error(f"Database file not found at {db_path}")
        return

    logger.info(f"Starting data cleanup for Mozilla records...")
    clean_mozilla_data(str(db_path))
    logger.info("Cleanup process completed")

if __name__ == "__main__":
    main()