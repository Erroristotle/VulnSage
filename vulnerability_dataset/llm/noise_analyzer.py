# llm/noise_analyzer.py

import sqlite3
import logging
import requests
from typing import Tuple, Optional
from ..git.git_manager_parse_LLM import GitManager
from ..config import settings

logger = logging.getLogger(__name__)

class NoiseAnalyzer:
    def __init__(self, model_name: str = "custom-deepseek-r1-7b", base_url: str = "http://localhost:11434"):
        """Initialize noise analyzer with Ollama configuration."""
        self.model_name = model_name
        self.base_url = base_url
        self.git_manager = GitManager()

    def analyze_commit_noise(self, description: str, diff: str) -> Tuple[int, str]:
        """
        Analyze if a commit contains significant noise (non-vulnerability related changes).
        
        Args:
            description: Commit description
            diff: Git diff content
            
        Returns:
            Tuple[int, str]: (is_noisy (1/0), reasoning)
        """
        prompt = f"""Task: Analyze this vulnerability fix commit to determine if it contains significant noise (non-vulnerability related changes).

Background:
- A noisy commit is one where more than 40% of the changes are not directly related to fixing the vulnerability
- Non-vulnerability related changes include:
  * Code refactoring not required for the fix
  * Feature additions
  * Style changes
  * Adding extensive comments
  * Unrelated cleanup
  * Other modifications not essential for the security fix

Commit Description:
{description}

Git Diff:
{diff}

Please think through this step by step:

1. First, identify the core vulnerability fix changes by understanding:
   - What security issue is being addressed?
   - What are the essential changes needed to fix it?

2. Then, analyze all changes in the diff to identify:
   - Which changes are essential for the vulnerability fix
   - Which changes are non-essential or unrelated

3. Estimate the proportion of noise:
   - What percentage of changes are not directly related to the vulnerability fix?
   - Consider both the number and significance of changes

4. Make a final decision:
   - If more than 40% of changes are noise -> Label as noisy (1)
   - If 40% or less are noise -> Label as clean (0)

Provide your conclusion in this exact format:
NOISE_LABEL: [1 or 0]
REASONING: [Your detailed explanation]

Focus only on the security fix relevance. Even well-intentioned changes count as noise if they're not essential for the vulnerability fix."""

        try:
            response = requests.post(
                f"{self.base_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "temperature": 0.7
                }
            )

            if response.status_code != 200:
                logger.error(f"Error from Ollama API: {response.text}")
                return (0, "Error analyzing noise")

            response_text = response.json()['response']
            
            # Parse response
            noise_label = 0
            reasoning = ""
            
            for line in response_text.split('\n'):
                if line.startswith('NOISE_LABEL:'):
                    try:
                        noise_label = int(line.split(':')[1].strip())
                    except:
                        noise_label = 0
                elif line.startswith('REASONING:'):
                    reasoning = line.split(':')[1].strip()
            
            return (noise_label, reasoning)

        except Exception as e:
            logger.error(f"Error analyzing commit noise: {e}")
            return (0, f"Error: {str(e)}")

def update_noise_analysis(db_path: str = None):
    """Update database with noise analysis results."""
    db_path = db_path or settings.DB_PATH
    noise_analyzer = NoiseAnalyzer()
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Add columns if they don't exist
        cursor.execute("PRAGMA table_info(vulnerabilities)")
        columns = [info[1] for info in cursor.fetchall()]
        
        if 'IS_NOISY' not in columns:
            cursor.execute("ALTER TABLE vulnerabilities ADD COLUMN IS_NOISY INTEGER")
        if 'NOISE_REASONING' not in columns:
            cursor.execute("ALTER TABLE vulnerabilities ADD COLUMN NOISE_REASONING TEXT")
        
        # Get commits to analyze
        cursor.execute("""
            SELECT COMMIT_HASH, DESCRIPTION_IN_PATCH, PROJECT 
            FROM vulnerabilities
            WHERE DESCRIPTION_IN_PATCH IS NOT NULL
        """)
        
        rows = cursor.fetchall()
        total = len(rows)
        logger.info(f"Found {total} commits to analyze")
        
        for i, (commit_hash, description, project) in enumerate(rows, 1):
            try:
                # Get git diff using existing GitManager
                diff = noise_analyzer.git_manager.get_patch(project, commit_hash)
                if not diff:
                    logger.warning(f"No diff found for {commit_hash} in {project}")
                    continue
                
                # Analyze noise
                is_noisy, reasoning = noise_analyzer.analyze_commit_noise(description, diff)
                
                # Update database
                cursor.execute("""
                    UPDATE vulnerabilities
                    SET IS_NOISY = ?, NOISE_REASONING = ?
                    WHERE COMMIT_HASH = ? AND PROJECT = ?
                """, (is_noisy, reasoning, commit_hash, project))
                
                if i % 10 == 0:
                    conn.commit()
                    logger.info(f"Processed {i}/{total} commits")
                    logger.info(f"Last processed: {commit_hash} (Noisy: {is_noisy})")
            
            except Exception as e:
                logger.error(f"Error processing commit {commit_hash}: {e}")
                continue
        
        conn.commit()
        
        # Print summary
        cursor.execute("""
            SELECT 
                PROJECT,
                COUNT(*) as total,
                SUM(CASE WHEN IS_NOISY = 1 THEN 1 ELSE 0 END) as noisy_count
            FROM vulnerabilities
            WHERE IS_NOISY IS NOT NULL
            GROUP BY PROJECT
        """)
        
        print("\nNoise Analysis Summary:")
        for project, total, noisy_count in cursor.fetchall():
            print(f"\n{project}:")
            print(f"  Total analyzed: {total}")
            print(f"  Noisy commits: {noisy_count} ({(noisy_count/total)*100:.1f}%)")
            
    except Exception as e:
        logger.error(f"Database error: {e}")
        raise
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    update_noise_analysis()