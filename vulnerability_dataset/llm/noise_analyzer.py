import subprocess
import requests
import sys
import json
import sqlite3
from typing import Dict, Tuple, List
from urllib.parse import quote
import time

# Configuration
OLLAMA_API_URL = "http://localhost:11434/api/generate"
MODEL_NAME = "deepseek-r1-7b:custom"
DB_PATH = "/home/azibaeir/Research/Benchmarking/project/vulnerability_dataset/database/database.sqlite"
# GitHub repository URLs
REPO_URLS = {
    'mozilla': "https://github.com/mozilla/gecko-dev/commit/{}",
    'linux': "https://github.com/torvalds/linux/commit/{}",
    'xen': "https://github.com/xen-project/xen/commit/{}"
}

def get_unanalyzed_commits() -> List[Tuple[str, str]]:
    """Fetch commits that haven't been analyzed yet from the vulnerabilities table."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    # Get commits where NOISE_AMOUNT is NULL
    c.execute('''SELECT COMMIT_HASH, PROJECT 
                 FROM vulnerabilities 
                 WHERE NOISE_AMOUNT IS NULL''')
    commits = c.fetchall()
    
    conn.close()
    return commits

def get_github_diff(project: str, commit_hash: str) -> Tuple[str, str]:
    """Fetch commit information from GitHub."""
    if project not in REPO_URLS:
        raise ValueError(f"Unknown project: {project}")
    
    try:
        # Get the commit page
        commit_url = REPO_URLS[project].format(commit_hash)
        
        # Get the diff
        diff_response = requests.get(f"{commit_url}.diff")
        diff_response.raise_for_status()
        diff_content = diff_response.text
        
        # Get the commit message (it's included in the diff at the top)
        commit_message = diff_content.split('\n\n')[0].split('\n', 1)[1].strip()
        
        return commit_message, diff_content
    
    except requests.exceptions.RequestException as e:
        print(f"Error fetching from GitHub: {e}")
        return None, None

def query_ollama(prompt: str, model: str = MODEL_NAME) -> Dict:
    """Query the Ollama API and return parsed response."""
    payload = {
        "model": model,
        "prompt": prompt,
        "temperature": 0.7,
        "stream": False
    }
    try:
        response = requests.post(OLLAMA_API_URL, json=payload)
        response.raise_for_status()
        data = response.json()
        
        # Parse the response to extract noise score and reasoning
        response_text = data.get("response", "")
        
        # Extract noise amount and reasoning
        noise_line = next((line for line in response_text.split('\n') 
                          if line.startswith("NOISE_AMOUNT:")), None)
        reasoning_line = next((line for line in response_text.split('\n') 
                             if line.startswith("REASONING:")), None)
        
        if not noise_line or not reasoning_line:
            raise ValueError("Could not parse Ollama response format")
            
        noise_score = int(noise_line.split(":")[1].strip())
        reasoning = reasoning_line.split(":", 1)[1].strip()
        
        return {"noise_score": noise_score, "reasoning": reasoning}
    
    except Exception as e:
        print(f"Error querying Ollama API: {e}")
        return None

def update_commit_noise(commit_hash: str, noise_score: int, reasoning: str) -> None:
    """Update the vulnerabilities table with noise analysis results."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    try:
        c.execute('''UPDATE vulnerabilities 
                     SET NOISE_AMOUNT = ?, NOISE_REASONING = ?
                     WHERE COMMIT_HASH = ?''',
                 (noise_score, reasoning, commit_hash))
        conn.commit()
    except sqlite3.Error as e:
        print(f"Database error: {e}")
    finally:
        conn.close()

def analyze_commit(project: str, commit_hash: str) -> bool:
    """Analyze a single commit and store results in database."""
    try:
        # Fetch commit information from GitHub
        commit_desc, commit_diff = get_github_diff(project, commit_hash)
        if not commit_desc or not commit_diff:
            print(f"Could not fetch commit info for {commit_hash}")
            return False
        
        # Construct the analysis prompt
        prompt = f"""Task: You are a security analyst tasked with evaluating the "noise" in a commit that fixes a vulnerability.
"Noise" is defined as the proportion of changes that are not directly related to the core vulnerability fix.
You are provided with the following information:

Commit Description:
{commit_desc}

Git Diff:
{commit_diff}

Please follow these steps:

1. Review the commit description to understand the intent behind the changes.
2. Analyze the git diff to identify what modifications were made.
3. Examine the patched code block to determine if the changes focus solely on fixing the vulnerability or include extra, non-essential modifications.
4. Based on your analysis, estimate the overall level of noise on a scale from 0 to 100, where 0 means nearly all changes are essential and 100 means most changes are unrelated.
5. Provide a step-by-step reasoning of your analysis.
6. On a new line, output your final result exactly in the following format:
   
   NOISE_AMOUNT: X
   REASONING: [Your detailed explanation]

Now, analyze the above input and produce your output.
"""
        # Get analysis from Ollama
        result = query_ollama(prompt)
        if not result:
            print(f"Could not get analysis for {commit_hash}")
            return False
        
        # Update database with results
        update_commit_noise(commit_hash, result['noise_score'], result['reasoning'])
        
        print(f"Successfully analyzed commit {commit_hash}")
        print(f"Noise Score: {result['noise_score']}")
        print(f"Reasoning: {result['reasoning']}")
        return True
        
    except Exception as e:
        print(f"Error analyzing commit {commit_hash}: {e}")
        return False

def main():
    # Get all unanalyzed commits
    commits = get_unanalyzed_commits()
    print(f"Found {len(commits)} commits to analyze")
    
    # Process each commit
    for i, (commit_hash, project) in enumerate(commits, 1):
        print(f"\nProcessing commit {i}/{len(commits)}: {commit_hash}")
        success = analyze_commit(project, commit_hash)
        
        if not success:
            print(f"Failed to analyze commit {commit_hash}")
        
        # Add a small delay between requests to avoid overwhelming the APIs
        time.sleep(1)

if __name__ == "__main__":
    main()