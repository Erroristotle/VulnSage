import requests
import logging
import dspy
from typing import List, Dict, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class CodeBlock:
    file_path: str
    functions: List[str]
    non_function_elements: List[str]

class ExtractVulnerableCode(dspy.Signature):
    """Extract vulnerable code blocks from git diff and pre-commit file content."""
    context: str = dspy.InputField()
    vulnerable_code: str = dspy.OutputField(desc="The extracted vulnerable code block")
    reasoning: str = dspy.OutputField(desc="Explanation of the extraction process")

class ExtractPatchedCode(dspy.Signature):
    """Extract patched code blocks from git diff and commit file content."""
    context: str = dspy.InputField()
    patched_code: str = dspy.OutputField(desc="The extracted patched code block")
    reasoning: str = dspy.OutputField(desc="Explanation of the extraction process")

class LLMCodeExtractor:
    def __init__(self, model_name: str = "deepseek-r1-7b:custom", base_url: str = "http://localhost:11434"):
        # Initialize DSPy with Ollama
        lm = dspy.LM(
            f"ollama_chat/{model_name}",
            api_base=base_url,
            api_key="local",
            model_type="chat"
        )
        dspy.configure(lm=lm)
        
        self.vulnerable_extractor = dspy.ChainOfThought(ExtractVulnerableCode)
        self.patched_extractor = dspy.ChainOfThought(ExtractPatchedCode)

    def extract_code_blocks(self, file_diff: str, pre_commit_content: str, commit_content: str) -> dict:
        """Extract vulnerable and patched code blocks separately using DSPy.
        
        For the vulnerable code block, pass the pre-commit file content (git show <commit hash>^:<file path>).
        For the patched code block, pass the commit file content (git show <commit hash>:<file path>).
        """
        try:
            vulnerable_prompt = f"""Given this git diff and file content, extract ONLY the vulnerable version of the changed code (before the fix).

**Important Rules:**
- Exclude any comments from the extracted code block.
- If all the changes were just comments, ignore them and extract only the code part.
- Ensure that the extracted function includes its full body, name, and parameters.
- Maintain necessary context for non-function elements.

**Git Diff:**
{file_diff}

**Pre-Commit File Content:**
{pre_commit_content}

Format your response exactly like this:

VULNERABLE_CODE:
// File path: path/to/file1 Non-function element 1, 2

Function 1(int param1, char *param2, ...) {{ '// Function body' }}

Function 2(double param1, int param2, ...) {{ '// Function body' }}"""

            patched_prompt = f"""Given this git diff and file content, extract ONLY the patched version of the changed code (after the fix).

**Important Rules:**
- Exclude any comments from the extracted code block.
- If all the changes were just comments, ignore them and extract only the code part.
- Ensure that the extracted function includes its full body, name, and parameters.
- Maintain necessary context for non-function elements.

**Git Diff:**
{file_diff}

**Commit File Content:**
{commit_content}

Format your response exactly like this:

PATCHED_CODE:
// File path: path/to/file1 Non-function element 1, 2

Function 1(int param1, char *param2, ...) {{ '// Function body' }}

Function 2(double param1, int param2, ...) {{ '// Function body' }}"""

            vulnerable_result = self.vulnerable_extractor(context=vulnerable_prompt)
            patched_result = self.patched_extractor(context=patched_prompt)

            logger.info(f"Vulnerable extraction reasoning: {vulnerable_result.reasoning}")
            logger.info(f"Patched extraction reasoning: {patched_result.reasoning}")
            logger.info(f"Raw vulnerable response: {vulnerable_result.vulnerable_code}")
            logger.info(f"Raw patched response: {patched_result.patched_code}")

            vulnerable_code = vulnerable_result.vulnerable_code.strip()
            patched_code = patched_result.patched_code.strip()

            if not vulnerable_code or not patched_code:
                logger.warning("Failed to extract code blocks properly")
                logger.warning(f"Vulnerable code extracted: {bool(vulnerable_code)}")
                logger.warning(f"Patched code extracted: {bool(patched_code)}")

            return {
                "vulnerable_code": vulnerable_code,
                "patched_code": patched_code
            }

        except Exception as e:
            logger.error(f"Error extracting code blocks: {e}")
            return {"vulnerable_code": "", "patched_code": ""}
