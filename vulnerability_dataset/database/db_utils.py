import sqlite3
from contextlib import contextmanager
import time
from typing import Tuple, Generator
import logging
from ..config import settings
import os

logger = logging.getLogger(__name__)

@contextmanager
def get_db_connection(db_path: str, max_retries: int = 5, retry_delay: int = 1) -> Generator[Tuple[sqlite3.Connection, sqlite3.Cursor], None, None]:
    """Create database connection with retry logic."""
    # Ensure that the directory for the database exists.
    db_dir = os.path.dirname(db_path)
    if not os.path.exists(db_dir):
        os.makedirs(db_dir, exist_ok=True)

    attempt = 0
    while attempt < max_retries:
        try:
            conn = sqlite3.connect(db_path, timeout=settings.DB_TIMEOUT)
            conn.execute(f'PRAGMA journal_mode={settings.DB_JOURNAL_MODE}')
            conn.execute(f'PRAGMA busy_timeout={settings.DB_BUSY_TIMEOUT}')
            cursor = conn.cursor()
            yield conn, cursor
            return
        except sqlite3.OperationalError as e:
            attempt += 1
            if attempt == max_retries:
                logger.error(f"Failed to connect to database after {attempt} attempts")
                raise
            logger.warning(f"Database is locked, retrying in {retry_delay} seconds... (Attempt {attempt}/{max_retries})")
            time.sleep(retry_delay)
        finally:
            if 'conn' in locals():
                try:
                    conn.close()
                except Exception as e:
                    logger.error(f"Error closing database connection: {e}")

def count_code_lines(code_block: str) -> int:
    """Count number of lines in a code block."""
    if not code_block:
        return 0
    return len(code_block.split('\n'))

def update_code_block_stats(conn: sqlite3.Connection, cursor: sqlite3.Cursor,
                          commit_hash: str, project: str,
                          vulnerable_code: str, patched_code: str) -> None:
    """Update line count statistics for code blocks."""
    vuln_lines = count_code_lines(vulnerable_code)
    patch_lines = count_code_lines(patched_code)
    
    cursor.execute("""
        UPDATE vulnerabilities
        SET NUM_LINES_IN_VULNERABLE_CODE_BLOCK = ?,
            NUM_LINES_IN_PATCHED_CODE_BLOCK = ?
        WHERE COMMIT_HASH = ? AND PROJECT = ?
    """, (vuln_lines, patch_lines, commit_hash, project))
    conn.commit()