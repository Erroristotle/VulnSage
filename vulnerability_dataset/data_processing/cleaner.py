from typing import Dict, Tuple
import logging
from ..database.db_utils import get_db_connection
from ..config import settings
from ..utils.logger import log_execution_time

logger = logging.getLogger(__name__)

class DataCleaner:
    def __init__(self, db_path: str = None):
        self.db_path = db_path or settings.DB_PATH

    @log_execution_time(logger)
    def remove_duplicates(self) -> Tuple[int, int]:
        """Remove duplicate entries based on commit hash."""
        logger.info("Starting duplicate removal process")
        
        with get_db_connection(self.db_path) as (conn, cursor):
            # Get initial count
            cursor.execute("SELECT COUNT(*) FROM vulnerabilities")
            initial_count = cursor.fetchone()[0]
            
            # Remove duplicates
            cursor.execute("""
                DELETE FROM vulnerabilities 
                WHERE id NOT IN (
                    SELECT MIN(id)
                    FROM vulnerabilities
                    GROUP BY COMMIT_HASH
                )
            """)
            
            cursor.execute("SELECT COUNT(*) FROM vulnerabilities")
            final_count = cursor.fetchone()[0]
            
            conn.commit()
            logger.info(f"Removed {initial_count - final_count} duplicates")
            return initial_count, final_count

    @log_execution_time(logger)
    def remove_invalid_entries(self) -> Dict[str, int]:
        """Remove entries with missing required fields."""
        logger.info("Starting invalid entry cleanup")
        
        with get_db_connection(self.db_path) as (conn, cursor):
            cursor.execute("SELECT COUNT(*) FROM vulnerabilities")
            initial_count = cursor.fetchone()[0]
            
            cursor.execute("""
                DELETE FROM vulnerabilities
                WHERE VULNERABILITY_CWE IS NULL 
                   OR VULNERABILITY_CWE = ''
                   OR VULNERABLE_CODE_BLOCK IS NULL 
                   OR VULNERABLE_CODE_BLOCK = ''
                   OR PATCHED_CODE_BLOCK IS NULL 
                   OR PATCHED_CODE_BLOCK = ''
            """)
            
            cursor.execute("SELECT COUNT(*) FROM vulnerabilities")
            final_count = cursor.fetchone()[0]
            
            conn.commit()
            
            return {
                'initial_count': initial_count,
                'final_count': final_count,
                'removed_count': initial_count - final_count
            }

    @log_execution_time(logger)
    def remove_large_code_blocks(self, max_lines: int = 500) -> Dict[str, int]:
        """Remove entries with code blocks exceeding size limit."""
        logger.info(f"Removing entries with code blocks larger than {max_lines} lines")
        
        with get_db_connection(self.db_path) as (conn, cursor):
            cursor.execute("SELECT COUNT(*) FROM vulnerabilities")
            initial_count = cursor.fetchone()[0]
            
            cursor.execute(f"""
                DELETE FROM vulnerabilities
                WHERE NUM_LINES_IN_VULNERABLE_CODE_BLOCK > {max_lines}
                   OR NUM_LINES_IN_PATCHED_CODE_BLOCK > {max_lines}
            """)
            
            cursor.execute("SELECT COUNT(*) FROM vulnerabilities")
            final_count = cursor.fetchone()[0]
            
            conn.commit()
            
            return {
                'initial_count': initial_count,
                'final_count': final_count,
                'removed_count': initial_count - final_count
            }

    @log_execution_time(logger)
    def standardize_cwe_format(self) -> int:
        """Standardize CWE format to CWE-XXX."""
        with get_db_connection(self.db_path) as (conn, cursor):
            cursor.execute("SELECT DISTINCT VULNERABILITY_CWE FROM vulnerabilities")
            cwe_values = cursor.fetchall()
            
            update_count = 0
            for (cwe_value,) in cwe_values:
                if cwe_value and not cwe_value.startswith('CWE-'):
                    try:
                        cwe_number = str(int(float(cwe_value)))
                        updated_cwe = f"CWE-{cwe_number}"
                        cursor.execute("""
                            UPDATE vulnerabilities
                            SET VULNERABILITY_CWE = ?
                            WHERE VULNERABILITY_CWE = ?
                        """, (updated_cwe, cwe_value))
                        update_count += cursor.rowcount
                    except (ValueError, TypeError):
                        logger.warning(f"Invalid CWE value: {cwe_value}")
                        continue
            
            conn.commit()
            logger.info(f"Standardized {update_count} CWE values")
            return update_count