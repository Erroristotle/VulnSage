import pandas as pd
import sqlite3
import csv
from pathlib import Path
from typing import Union, List
import logging
from ..config import settings

logger = logging.getLogger(__name__)

class DataExporter:
    def __init__(self, db_path: str = None):
        self.db_path = db_path or settings.DB_PATH

    def export_to_csv(self, output_path: Union[str, Path], 
                     columns: List[str] = None) -> None:
        """
        Export vulnerabilities table to CSV.
        
        Args:
            output_path: Path to output CSV file
            columns: Optional list of columns to export
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Get column names if not specified
                if not columns:
                    cursor.execute('PRAGMA table_info(vulnerabilities)')
                    columns = [info[1] for info in cursor.fetchall()]
                
                # Construct and execute query
                columns_str = ', '.join(f'"{col}"' for col in columns)
                query = f'SELECT {columns_str} FROM vulnerabilities'
                
                # Export to CSV
                df = pd.read_sql_query(query, conn)
                df = df[columns]  # Ensure correct column order
                
                df.to_csv(output_path, 
                         index=False, 
                         quoting=csv.QUOTE_MINIMAL,
                         encoding='utf-8')
                
                logger.info(f"Successfully exported {len(df)} records to {output_path}")
                
        except Exception as e:
            logger.error(f"Error exporting data: {e}")
            raise

    def get_vulnerability_stats(self) -> pd.DataFrame:
        """Get vulnerability statistics as DataFrame."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                query = """
                SELECT 
                    PROJECT,
                    COUNT(*) as total_vulnerabilities,
                    COUNT(DISTINCT VULNERABILITY_CWE) as unique_cwes,
                    AVG(NUM_LINES_IN_VULNERABLE_CODE_BLOCK) as avg_vulnerable_lines,
                    AVG(NUM_LINES_IN_PATCHED_CODE_BLOCK) as avg_patched_lines,
                    AVG(NUM_FILES_CHANGED) as avg_files_changed,
                    AVG(NUM_FUNCTIONS_CHANGED) as avg_functions_changed
                FROM vulnerabilities
                GROUP BY PROJECT
                """
                return pd.read_sql_query(query, conn)
                
        except Exception as e:
            logger.error(f"Error getting vulnerability stats: {e}")
            raise

    def get_cwe_distribution(self) -> pd.DataFrame:
        """Get CWE distribution statistics."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                query = """
                SELECT 
                    VULNERABILITY_CWE,
                    COUNT(*) as count,
                    GROUP_CONCAT(PROJECT) as projects
                FROM vulnerabilities
                GROUP BY VULNERABILITY_CWE
                ORDER BY count DESC
                """
                return pd.read_sql_query(query, conn)
                
        except Exception as e:
            logger.error(f"Error getting CWE distribution: {e}")
            raise