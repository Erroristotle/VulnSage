import subprocess
import requests
import re
from pathlib import Path
from typing import Dict, Optional, List, Tuple, Any
import logging
import clang
from .git_utils import extract_function_signatures, extract_function
from config import settings
from llm.function_counter import LLMFunctionCounter
from utils.code_parser import CodeParser
from llm.code_extractor import LLMCodeExtractor
import os

logger = logging.getLogger(__name__)

class GitManager:
    def __init__(self):
        self.code_parser = CodeParser()
        self.repo_paths = {
            'mozilla': settings.MOZILLA_REPO_PATH,
            'chrome': settings.CHROME_REPO_PATH,
            'xen': settings.XEN_REPO_PATH
        }
        self.code_extractor = LLMCodeExtractor()
        self.github_urls = settings.GITHUB_URLS
        self.function_counter = LLMFunctionCounter()
        self.project = None
        self.repo_path = None
    
    def get_changed_files(self, project: str, commit_hash: str) -> List[str]:
        """Retrieve the list of files changed in a given commit."""
        repo_path = self.repo_paths.get(project)
        if not repo_path:
            logger.error(f"Unknown project: {project}")
            return []

        try:
            cmd = ["git", "diff-tree", "--no-commit-id", "--name-only", "-r", commit_hash]
            result = subprocess.run(cmd, cwd=repo_path, stdout=subprocess.PIPE, text=True, check=True)
            changed_files = result.stdout.strip().split("\n")
            return changed_files
        except subprocess.CalledProcessError as e:
            logger.error(f"Error retrieving changed files for {commit_hash}: {e}")
            return []

    def get_file(self, commit_hash, file_path):
        """
        Retrieve the content of the file at the commit (current version).
        """
        # Use self.repo_path if set, otherwise get from repo_paths
        repo_path = self.repo_path or self.repo_paths.get(self.project)
        if not repo_path:
            logger.error(f"No repository path found for project {self.project}")
            return None

        cmd = ["git", "show", f"{commit_hash}:{file_path}"]
        try:
            result = subprocess.run(cmd, cwd=repo_path, text=True, capture_output=True, check=True)
            return result.stdout
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to get current version of {file_path}: {e}")
            return None
    
    def get_diff(self, project: str, commit_hash: str, file_name) -> Optional[str]:
        """Get the diff for a specific commit and file."""
        repo_path = self.repo_path or self.repo_paths.get(project)
        if not repo_path:
            logger.error(f"No repository path found for project {project}")
            return None

        cmd = ["git", "diff", commit_hash, commit_hash + "^", "--", file_name]
        try:
            result = subprocess.run(cmd, cwd=repo_path, text=True, capture_output=True, check=True)
            return result.stdout
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to get diff for {file_name}: {e}")
            return None

    def analyze_patch(self, patch_text: str) -> dict:
        """Analyze patch content using LLM."""
        if not patch_text:
            return {}
        
        # Count line changes
        lines_added = 0
        lines_deleted = 0
        for line in patch_text.split('\n'):
            if line.startswith('+') and not line.startswith('+++'):
                lines_added += 1
            elif line.startswith('-') and not line.startswith('---'):
                lines_deleted += 1

        return {
            'lines_added': lines_added,
            'lines_deleted': lines_deleted,
        }
        
    def build_code_blocks(self, pre_commit_content: str, commit_content: str, file_diff: str, file_path: str) -> dict:
        """Build code blocks for a specific file's changes."""
        try:
            # Extract code blocks using LLM
            blocks = self.code_extractor.extract_code_blocks(
                file_diff=file_diff,
                pre_commit_content=pre_commit_content,
                commit_content=commit_content
            )
            
            return blocks
            
        except Exception as e:
            logger.error(f"Error building code blocks for {file_path}: {e}")
            return {"vulnerable_code": "", "patched_code": ""}
    

    def get_commit_description(self, project: str, commit_hash: str) -> Optional[str]:
        """Get commit description."""
        try:
            repo_path = self.repo_paths[project]
            result = subprocess.run(
                ['git', 'log', '--format=%B', '-n', '1', commit_hash],
                cwd=repo_path,
                stdout=subprocess.PIPE,
                text=True,
                encoding='utf-8'
            )
            return result.stdout.strip()
        except Exception as e:
            logger.error(f"Error getting description for {commit_hash}: {e}")
            return None
